{"version":3,"sources":["initialData.js","componets/task.jsx","componets/column.jsx","index.js"],"names":["initialData","tasks","id","content","columns","title","taskIds","columnOrder","Container","styled","div","props","isDragging","task","this","index","draggableId","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","Component","Title","h3","SubTitle","h4","TaskList","isDraggingOver","column","droppableId","type","droppableProps","map","key","placeholder","App","state","InitialData","onDragEnd","result","destination","source","inde","console","log","newColumnOrder","Array","from","splice","newState","setState","start","finish","startTaskIds","newStart","finishTaskIds","newFinish","newTaskIds","newColumn","direction","columnId","taskId","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.33d36751.chunk.js","sourcesContent":["const initialData = {\r\n    tasks:{\r\n        'task-1': { id:'task-1', content:'Get up early in the morning.' },\r\n        'task-2': { id:'task-2', content:'Make your day plan in the morning.' },\r\n        'task-3': { id:'task-3', content:'Pritotize your work.' },\r\n        'task-4': { id:'task-4', content:'Execute the top priority task first.' },\r\n        'task-5': { id:'task-5', content:'Then execute the less priority task.' },\r\n    },\r\n    columns:{\r\n        'column-1':{\r\n            id: 'column-1',\r\n            title:'To Do',\r\n            taskIds:['task-1','task-2','task-3','task-4','task-5'],\r\n        },\r\n        \r\n        'column-2':{\r\n            id: 'column-2',\r\n            title:'In Progress',\r\n            taskIds:[],\r\n        },\r\n        \r\n        'column-3':{\r\n            id: 'column-3',\r\n            title:'Done',\r\n            taskIds:[],\r\n        },\r\n\r\n    },\r\n    // facilitate reordering the columns\r\n    columnOrder: ['column-1', 'column-2', 'column-3'],\r\n};\r\n\r\nexport default initialData;","import React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\nimport {Draggable} from 'react-beautiful-dnd'\r\n\r\n\r\nconst Container = styled.div`\r\n    border:solid 1px lightgrey;\r\n    border-radius:2px;\r\n    padding:10px;\r\n    margin-bottom:10px;\r\n    background:${props => (props.isDragging ? 'lightgreen': 'white')};\r\n`\r\n\r\nexport class task extends Component {\r\n    render() {\r\n        const {task, index} = this.props;\r\n        return (\r\n            <Draggable \r\n                draggableId={this.props.task.id}\r\n                index={this.props.index}\r\n            >\r\n                {(provided, snapshot) => (\r\n                    <Container\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                        isDragging={snapshot.isDragging}\r\n                    >\r\n                        {task.id} = {task.content}\r\n                    </Container>\r\n                )}\r\n            </Draggable>\r\n        )\r\n    }\r\n}\r\n\r\nexport default task\r\n","import React, { Component } from 'react'\r\nimport styled from 'styled-components';\r\nimport Task from './task'\r\nimport {Droppable, Draggable} from 'react-beautiful-dnd'\r\n\r\nconst Container = styled.div`\r\n    border:solid 1px lightgray;\r\n    margin:15px;\r\n    padding:15px;\r\n    flex:1;\r\n    background:white;\r\n\r\n    display:flex;\r\n    flex-direction:column;\r\n`;\r\nconst Title = styled.h3`\r\n    margin-bottom:15px;\r\n`;\r\nconst SubTitle = styled.h4`\r\n    margin-bottom:15px;\r\n    text-transform:capitalize;\r\n`;\r\n\r\nconst TaskList = styled.div`\r\n    margin-bottom:10px;\r\n    background: ${props => (props.isDraggingOver) ? 'skyblue': 'inherit'}\r\n    padding:15px;\r\n    border:solid 1px lightgray;\r\n    transition: background-color 0.2s ease;\r\n    flex-grow:1;\r\n    min-height:100px;\r\n`;\r\n\r\n\r\nexport class column extends Component {\r\n    render() {\r\n        const {index, column, tasks} = this.props;\r\n        return (\r\n            <Draggable draggableId={column.id} index={index} > \r\n                {(provided) => (\r\n                \r\n                <Container\r\n                    {...provided.draggableProps}\r\n                    ref={provided.innerRef}\r\n                >\r\n                    \r\n                    <Title {...provided.dragHandleProps} >\r\n                        {column.title}\r\n                    </Title>\r\n\r\n                    <Droppable droppableId={column.id} type=\"task\">\r\n                        {(provided, snapshot) => (\r\n                            <TaskList\r\n                                ref={provided.innerRef}\r\n                                {...provided.droppableProps}\r\n                                isDraggingOver={snapshot.isDraggingOver}\r\n                            >\r\n                                <SubTitle>{column.id}</SubTitle>\r\n                                {\r\n                                    tasks.map( (task, index) => \r\n                                        <Task key={index} task={task} index={index}  />\r\n                                    )\r\n                                }\r\n                                {\r\n                                    provided.placeholder\r\n                                }    \r\n                            </TaskList>\r\n                        )}\r\n                    </Droppable>                \r\n                </Container>\r\n                    \r\n                )}\r\n            </Draggable>\r\n        )\r\n    }\r\n}\r\n\r\nexport default column\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport {DragDropContext, Droppable} from 'react-beautiful-dnd'\nimport InitialData from './initialData'\nimport Column from './componets/column'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n    display:flex;\n`\n\nclass App extends React.Component{\n    \n    state = InitialData;\n\n    onDragEnd = result => {\n        // console.log(this.state, result);\n        const {destination, source, draggableId, type} = result;\n        \n        // if there is no destinaton then return\n        if(!destination){\n            return;\n        }\n        \n        // if drag position and drop position are same\n        if(\n            destination.droppableId === source.droppableId &&\n            destination.index === source.inde\n        ){\n            return;\n        }\n\n        if(type=== 'column'){\n            console.log(this.state.columnOrder);\n            const newColumnOrder = Array.from(this.state.columnOrder);\n            newColumnOrder.splice(source.index, 1);\n            newColumnOrder.splice(destination.index, 0, draggableId);\n            console.log(newColumnOrder);\n            const newState = {\n                ...this.state,\n                columnOrder:newColumnOrder,\n            };\n            console.log('new State while columndrag', newState);\n            this.setState(newState);\n            console.log(this.state);\n            return;\n        }\n\n        const start = this.state.columns[source.droppableId];\n        const finish = this.state.columns[destination.droppableId];\n\n        // console.log(start, finish);\n\n        if(start === finish){\n            const newTaskIds = Array.from(start.taskIds);\n        \n            //remove the dragged items index from original array\n            newTaskIds.splice(source.index, 1);\n            // console.log('start', start.taskIds, 'nesTaskIds', newTaskIds);\n    \n            // then place that dragged id index to where it dropped in that array\n            newTaskIds.splice(destination.index, 0, draggableId);\n            // console.log('again start', start, 'again nesTaskIds', newTaskIds);\n    \n            \n            //\n            const newColumn = {\n                ...start,\n                taskIds: newTaskIds,\n            };\n            // console.log('newColumn', newColumn);\n    \n            const newState = {\n                ...this.state,\n                columns:{\n                    ...this.state.columns,\n                    [newColumn.id]: newColumn,\n                }\n            };\n            // console.log('newState', newState);\n    \n            this.setState(newState);\n            return;\n        }\n\n        // Moving from one list to another\n        const startTaskIds = Array.from(start.taskIds);\n        startTaskIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            taskIds: startTaskIds,\n        };\n        // console.log('new start', newStart);\n        const finishTaskIds = Array.from(finish.taskIds);\n        finishTaskIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            taskIds: finishTaskIds,\n        };\n        // console.log('new finish', newFinish);\n\n\n        const newState = {\n            ...this.state,\n            columns:{\n                ...this.state.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            },\n        };\n        // console.log('new state', newState);\n        this.setState(newState);\n        \n    }\n    render(){\n        console.log('render state', this.state);\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd} >\n                <Droppable \n                    droppableId=\"all-columns\"\n                    direction=\"horizontal\"\n                    type=\"column\"\n                >\n                    {provided => (\n                    <Container \n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                    >\n                        {\n                            this.state.columnOrder.map( (columnId, index) => {\n                                const column = this.state.columns[columnId];\n                                console.log('column', column.taskIds);\n                                const tasks = column.taskIds.map( taskId => this.state.tasks[taskId] );\n                                \n                                return( \n                                    <Column\n                                    index={index}\n                                    key={column.id}\n                                    column={column}\n                                    tasks={tasks}\n                                    />\n                                );\n                            })\n                        }\n                        {provided.placeholder}\n                    </Container>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        )\n    }\n\n}\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}